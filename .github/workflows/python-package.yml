name: Build, Test and Release

on:
  push:
    anches: [ "main", "contribution"]
  pull_request:
    branches: [ "main", "contribution"]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libxcb-cursor0 libxkbcommon-x11-0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          export QT_QPA_PLATFORM=offscreen
          python -m unittest discover -s tests -p "*.py"

  build:
    runs-on: windows-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      
      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed main.py

      - name: Install Inno Setup
        run: choco install -y innosetup

      - name: Build Installer using Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" ./Setup.iss

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: Output/*.exe  # Make sure this matches your Inno Setup output path

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'  # Only run on pushes to main
    permissions:
      contents: write
    steps:
      - name: Download Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: installer
          path: dist/

      - name: Get version from project
        id: get_version
        run: |
          # Extract version from your project (adjust this to match your version source)
          # For example, if you have a __version__ in your module:
          VERSION=$(python -c "from your_module import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/MyAppInstaller.exe  # Adjust to your installer filename
          asset_name: MyAppInstaller_v${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/octet-stream