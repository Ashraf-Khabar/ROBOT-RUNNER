name: Build, Test and Release Pipeline

on:
  push:
    branches: [ "main", "contribution" ]
  pull_request:
    branches: [ "main", "contribution" ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libegl1 libopengl0 libxcb-cursor0 libxkbcommon-x11-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      env:
        QT_QPA_PLATFORM: "offscreen"
      run: |
        python -m pytest tests/

  build:
    name: Build Windows Executable
    needs: test
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
    
    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name MyApp main.py
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/MyApp.exe

  release:
    name: Create Release
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: dist
    
    - name: Get Version
      id: get_version
      run: |
        # Extract version from your project (adjust as needed)
        VERSION=$(python -c "from myapp import __version__; print(__version__)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        name: Release v${{ steps.get_version.outputs.version }}
        body: "Automated release"
        files: |
          dist/MyApp.exe