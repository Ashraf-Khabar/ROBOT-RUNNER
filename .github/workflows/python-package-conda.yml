name: Build and Deploy Installer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libxcb-cursor0 libxkbcommon-x11-0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          export QT_QPA_PLATFORM=offscreen
          python -m unittest discover -s tests -p "*.py"

  build:
    runs-on: windows-latest
    needs: tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
      
      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed main.py

      - name: Install Inno Setup
        run: choco install -y innosetup

      - name: Extract version from XML
        id: version
        shell: bash
        run: |
          # Install xmlstarlet for XML parsing
          if ! command -v xmlstarlet &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y xmlstarlet
          fi
          
          # Extract version from XML file
          VERSION=$(xmlstarlet sel -t -v "//version" config.xml | tr -d '[:space:]')
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Installer using Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /DMyAppVersion=${{ steps.version.outputs.VERSION }} ./Setup.iss

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: output/*.exe

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
  
      - name: Download Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: installer
          path: dist/
          
      - name: Extract version from XML
        id: version
        shell: bash
        run: |
          # Install xmlstarlet for XML parsing
          sudo apt-get update && sudo apt-get install -y xmlstarlet
          
          # Extract version from XML file
          VERSION=$(xmlstarlet sel -t -v "//version" config.xml | tr -d '[:space:]')
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
  
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body: "New release of the desktop application."
          draft: false
          prerelease: false
          files: dist/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
