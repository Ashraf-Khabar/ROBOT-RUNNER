name: Build and Deploy Installer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libxcb-cursor0 libxkbcommon-x11-0
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests
        run: |
          export QT_QPA_PLATFORM=offscreen
          python -m unittest discover -s tests -p "*.py"

  build:
    runs-on: windows-latest
    needs: tests
    outputs:
      sha256: ${{ steps.hash.outputs.SHA256 }}
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --name RobotTestRunner --add-data "./config.xml;." --add-data "./style/style.qss;style" --add-data "./images/*;images" --icon=images/Logo_exe_grand.ico main.py

      - name: Install Inno Setup
        run: choco install -y innosetup

      - name: Prepare Installers folder
        run: |
          mkdir installers

      - name: Download Redistributable and Python Installer
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vc_redist.x64.exe" -OutFile "installers/vc_redist.x64.exe"
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.10.0/python-3.10.0-amd64.exe" -OutFile "installers/python-3.10.0-amd64.exe"

      - name: Extract version from XML
        id: version
        shell: pwsh
        run: |
          [xml]$xml = Get-Content -Path "config.xml"
          $version = $xml.data.version.Trim()
          Write-Output "Extracted version: $version"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Clean previous outputs
        run: |
          if (Test-Path "output") { Remove-Item -Recurse -Force "output" }
          New-Item -ItemType Directory -Path "output" -Force

      - name: Build Installer using Inno Setup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" /DMyAppVersion=${{ steps.version.outputs.VERSION }} /DOutputDir=./output ./setup.iss

      - name: Create self-signed certificate
        shell: pwsh
        run: |
          $cert = New-SelfSignedCertificate -Type CodeSigningCert `
            -Subject "CN=RobotTestRunnerTempCert" `
            -KeyUsage DigitalSignature `
            -CertStoreLocation Cert:\CurrentUser\My `
            -HashAlgorithm SHA256 `
            -NotAfter (Get-Date).AddDays(30)
          
          Export-PfxCertificate `
            -Cert $cert `
            -FilePath ".\tempcert.pfx" `
            -Password (ConvertTo-SecureString -String "TempPassword123!" -Force -AsPlainText)
          
          echo "Certificate created and exported"

      - name: Sign the installer
        shell: pwsh
        run: |
          $password = ConvertTo-SecureString -String "TempPassword123!" -Force -AsPlainText
          Import-PfxCertificate `
            -FilePath ".\tempcert.pfx" `
            -CertStoreLocation Cert:\CurrentUser\My `
            -Password $password `
            -Exportable
          
          $cert = Get-ChildItem -Path Cert:\CurrentUser\My\ -CodeSigningCert | Where-Object { $_.Subject -eq "CN=RobotTestRunnerTempCert" } | Select-Object -First 1
          
          if ($null -eq $cert) {
            throw "Certificate not found"
          }
          
          Get-ChildItem -Path "output\*.exe" | ForEach-Object {
            Set-AuthenticodeSignature `
              -FilePath $_.FullName `
              -Certificate $cert `
              -TimestampServer "http://timestamp.digicert.com" `
              -HashAlgorithm SHA256
          }
          
          echo "Installer signed successfully"

      - name: Verify signature (non-blocking)
        shell: pwsh
        run: |
          Get-ChildItem -Path "output\*.exe" | ForEach-Object {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            Write-Output "`n=== Signature verification for $($_.Name) ==="
            Write-Output "Status: $($sig.Status)"
            Write-Output "Signer Certificate Subject: $($sig.SignerCertificate.Subject)"
            
            if ($sig.Status -ne "Valid") {
              Write-Warning "Signature is not trusted - Expected for self-signed certificates"
            } else {
              Write-Output "Signature is valid and trusted"
            }
            Write-Output "=================================`n"
          }

      - name: Calculate SHA256 hash
        id: hash
        shell: pwsh
        run: |
          $exeFile = Get-ChildItem -Path "output\*.exe" | Select-Object -First 1
          $hash = (Get-FileHash -Path $exeFile.FullName -Algorithm SHA256).Hash
          echo "SHA256=$hash" >> $env:GITHUB_OUTPUT
          echo "Generated hash: $hash"

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: output/*.exe

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
  
      - name: Download Installer Artifact
        uses: actions/download-artifact@v4
        with:
          name: installer
          path: dist/
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: "RobotTestRunner ${{ needs.build.outputs.version }}"
          body: |
            ## Release Notes
            
            ### Version ${{ needs.build.outputs.version }}
            
            ### Checksums
            **SHA256:** `${{ needs.build.outputs.sha256 }}`
            
            ### Verification
            This build was automatically signed with a temporary self-signed certificate.
            
            ### Verification Command (Windows):
            ```powershell
            Get-AuthenticodeSignature -FilePath ".\RobotTestRunner_Setup.exe" | Format-List
            ```
          draft: false
          prerelease: false
          files: dist/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}